// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SocketGameProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SocketGameProtocol {

  /// <summary>Holder for reflection information generated from SocketGameProtocol.proto</summary>
  public static partial class SocketGameProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for SocketGameProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SocketGameProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhTb2NrZXRHYW1lUHJvdG9jb2wucHJvdG8SElNvY2tldEdhbWVQcm90b2Nv",
            "bCLrAgoITWFpblBhY2sSCwoDc3RyGAEgASgJEjQKC3JlcXVlc3RDb2RlGAIg",
            "ASgOMh8uU29ja2V0R2FtZVByb3RvY29sLlJlcXVlc3RDb2RlEjIKCmFjdGlv",
            "bkNvZGUYAyABKA4yHi5Tb2NrZXRHYW1lUHJvdG9jb2wuQWN0aW9uQ29kZRIy",
            "CgpyZXR1cm5Db2RlGAQgASgOMh4uU29ja2V0R2FtZVByb3RvY29sLlJldHVy",
            "bkNvZGUSNgoMcmVnaXN0ZXJQYWNrGAUgASgLMiAuU29ja2V0R2FtZVByb3Rv",
            "Y29sLlJlZ2lzdGVyUGFjaxIuCghyb29tUGFjaxgGIAMoCzIcLlNvY2tldEdh",
            "bWVQcm90b2NvbC5Sb29tUGFjaxI6Cg5yb29tUGxheWVyUGFjaxgHIAMoCzIi",
            "LlNvY2tldEdhbWVQcm90b2NvbC5Sb29tUGxheWVyUGFjaxIQCgh1c2VyTmFt",
            "ZRgIIAEoCSIyCgxSZWdpc3RlclBhY2sSEAoIdXNlck5hbWUYASABKAkSEAoI",
            "cGFzc3dvcmQYAiABKAkiUwoIUm9vbVBhY2sSEAoIcm9vbU5hbWUYASABKAkS",
            "EAoIbWF4Q291bnQYAiABKAUSEAoIY3VyQ291bnQYAyABKAUSEQoJcm9vbVN0",
            "YXRlGAQgASgFIr8BCg5Sb29tUGxheWVyUGFjaxISCgpwbGF5ZXJOYW1lGAEg",
            "ASgJEhMKC3BsYXllclN0YXRlGAIgASgIEjoKDmNoYXJhU3RhdGVQYWNrGAMg",
            "ASgLMiIuU29ja2V0R2FtZVByb3RvY29sLkNoYXJhU3RhdGVQYWNrEhEKCWFu",
            "aW1hTmFtZRgEIAEoCRIQCghuYW1lVHlwZRgFIAEoCRIRCglib29sUGFyYW0Y",
            "BiABKAgSEAoIaW50UGFyYW0YByABKAUirQEKDkNoYXJhU3RhdGVQYWNrEgwK",
            "BHBvc1gYASABKAISDAoEcG9zWRgCIAEoAhIMCgRwb3NaGAMgASgCEg0KBXJv",
            "dGFYGAQgASgCEg0KBXJvdGFZGAUgASgCEg0KBXJvdGFaGAYgASgCEhAKCFJp",
            "Z1JvdGFYGAcgASgCEhAKCFJpZ1JvdGFZGAggASgCEhAKCFJpZ1JvdGFaGAkg",
            "ASgCEg4KBmhlYWx0aBgKIAEoBSpKCgtSZXF1ZXN0Q29kZRIPCgtSZXF1ZXN0",
            "Tm9uZRAAEggKBFVzZXIQARIMCghHYW1lSGFsbBACEggKBFJvb20QAxIICgRH",
            "YW1lEAQq6AEKCkFjdGlvbkNvZGUSDgoKQWN0aW9uTm9uZRAAEgwKCFJlZ2lz",
            "dGVyEAESCQoFTG9naW4QAhIMCghCYWNrVXNlchADEg4KCkNyZWF0ZVJvb20Q",
            "BBIMCghGaW5kUm9vbRAFEgwKCEpvaW5Sb29tEAYSFAoQVXBkYXRhUGxheWVy",
            "TGlzdBAHEgwKCEV4aXRSb29tEAgSCAoEQ2hhdBAJEgoKBlNldG91dBAKEg0K",
            "CVN0YXJ0R2FtZRALEg8KC1VwVHJhbnNmb3JtEAwSDwoLU2V0QW5pbWF0b3IQ",
            "DRIMCghFeGl0R2FtZRAOKjMKClJldHVybkNvZGUSDgoKUmV0dXJuTm9uZRAA",
            "EgsKB1N1Y2NlZWQQARIICgRGYWlsEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SocketGameProtocol.RequestCode), typeof(global::SocketGameProtocol.ActionCode), typeof(global::SocketGameProtocol.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.MainPack), global::SocketGameProtocol.MainPack.Parser, new[]{ "Str", "RequestCode", "ActionCode", "ReturnCode", "RegisterPack", "RoomPack", "RoomPlayerPack", "UserName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.RegisterPack), global::SocketGameProtocol.RegisterPack.Parser, new[]{ "UserName", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.RoomPack), global::SocketGameProtocol.RoomPack.Parser, new[]{ "RoomName", "MaxCount", "CurCount", "RoomState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.RoomPlayerPack), global::SocketGameProtocol.RoomPlayerPack.Parser, new[]{ "PlayerName", "PlayerState", "CharaStatePack", "AnimaName", "NameType", "BoolParam", "IntParam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SocketGameProtocol.CharaStatePack), global::SocketGameProtocol.CharaStatePack.Parser, new[]{ "PosX", "PosY", "PosZ", "RotaX", "RotaY", "RotaZ", "RigRotaX", "RigRotaY", "RigRotaZ", "Health" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    /// 用户
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    /// 大厅
    /// </summary>
    [pbr::OriginalName("GameHall")] GameHall = 2,
    /// <summary>
    /// 房间
    /// </summary>
    [pbr::OriginalName("Room")] Room = 3,
    /// <summary>
    /// 游戏
    /// </summary>
    [pbr::OriginalName("Game")] Game = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    /// 注册
    /// </summary>
    [pbr::OriginalName("Register")] Register = 1,
    /// <summary>
    /// 登录
    /// </summary>
    [pbr::OriginalName("Login")] Login = 2,
    /// <summary>
    /// 注销账号
    /// </summary>
    [pbr::OriginalName("BackUser")] BackUser = 3,
    /// <summary>
    /// 创建房间
    /// </summary>
    [pbr::OriginalName("CreateRoom")] CreateRoom = 4,
    /// <summary>
    /// 查询房间
    /// </summary>
    [pbr::OriginalName("FindRoom")] FindRoom = 5,
    /// <summary>
    /// 加入房间
    /// </summary>
    [pbr::OriginalName("JoinRoom")] JoinRoom = 6,
    /// <summary>
    /// 更新玩家列表
    /// </summary>
    [pbr::OriginalName("UpdataPlayerList")] UpdataPlayerList = 7,
    /// <summary>
    /// 退出房间
    /// </summary>
    [pbr::OriginalName("ExitRoom")] ExitRoom = 8,
    /// <summary>
    /// 聊天
    /// </summary>
    [pbr::OriginalName("Chat")] Chat = 9,
    /// <summary>
    /// 准备
    /// </summary>
    [pbr::OriginalName("Setout")] Setout = 10,
    /// <summary>
    /// 开始游戏
    /// </summary>
    [pbr::OriginalName("StartGame")] StartGame = 11,
    /// <summary>
    /// 更新角色transform
    /// </summary>
    [pbr::OriginalName("UpTransform")] UpTransform = 12,
    /// <summary>
    /// 设置动画
    /// </summary>
    [pbr::OriginalName("SetAnimator")] SetAnimator = 13,
    /// <summary>
    /// 退出游戏
    /// </summary>
    [pbr::OriginalName("ExitGame")] ExitGame = 14,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    /// 成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    /// 失败
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      str_ = other.str_;
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      registerPack_ = other.registerPack_ != null ? other.registerPack_.Clone() : null;
      roomPack_ = other.roomPack_.Clone();
      roomPlayerPack_ = other.roomPlayerPack_.Clone();
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 1;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestCode" field.</summary>
    public const int RequestCodeFieldNumber = 2;
    private global::SocketGameProtocol.RequestCode requestCode_ = global::SocketGameProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "actionCode" field.</summary>
    public const int ActionCodeFieldNumber = 3;
    private global::SocketGameProtocol.ActionCode actionCode_ = global::SocketGameProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "returnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 4;
    private global::SocketGameProtocol.ReturnCode returnCode_ = global::SocketGameProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "registerPack" field.</summary>
    public const int RegisterPackFieldNumber = 5;
    private global::SocketGameProtocol.RegisterPack registerPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.RegisterPack RegisterPack {
      get { return registerPack_; }
      set {
        registerPack_ = value;
      }
    }

    /// <summary>Field number for the "roomPack" field.</summary>
    public const int RoomPackFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SocketGameProtocol.RoomPack> _repeated_roomPack_codec
        = pb::FieldCodec.ForMessage(50, global::SocketGameProtocol.RoomPack.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol.RoomPack> roomPack_ = new pbc::RepeatedField<global::SocketGameProtocol.RoomPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol.RoomPack> RoomPack {
      get { return roomPack_; }
    }

    /// <summary>Field number for the "roomPlayerPack" field.</summary>
    public const int RoomPlayerPackFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SocketGameProtocol.RoomPlayerPack> _repeated_roomPlayerPack_codec
        = pb::FieldCodec.ForMessage(58, global::SocketGameProtocol.RoomPlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SocketGameProtocol.RoomPlayerPack> roomPlayerPack_ = new pbc::RepeatedField<global::SocketGameProtocol.RoomPlayerPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SocketGameProtocol.RoomPlayerPack> RoomPlayerPack {
      get { return roomPlayerPack_; }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 8;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Str != other.Str) return false;
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(RegisterPack, other.RegisterPack)) return false;
      if(!roomPack_.Equals(other.roomPack_)) return false;
      if(!roomPlayerPack_.Equals(other.roomPlayerPack_)) return false;
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (RequestCode != global::SocketGameProtocol.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SocketGameProtocol.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SocketGameProtocol.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (registerPack_ != null) hash ^= RegisterPack.GetHashCode();
      hash ^= roomPack_.GetHashCode();
      hash ^= roomPlayerPack_.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Str.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Str);
      }
      if (RequestCode != global::SocketGameProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SocketGameProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ReturnCode);
      }
      if (registerPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RegisterPack);
      }
      roomPack_.WriteTo(output, _repeated_roomPack_codec);
      roomPlayerPack_.WriteTo(output, _repeated_roomPlayerPack_codec);
      if (UserName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (RequestCode != global::SocketGameProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SocketGameProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (registerPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterPack);
      }
      size += roomPack_.CalculateSize(_repeated_roomPack_codec);
      size += roomPlayerPack_.CalculateSize(_repeated_roomPlayerPack_codec);
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.RequestCode != global::SocketGameProtocol.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SocketGameProtocol.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SocketGameProtocol.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.registerPack_ != null) {
        if (registerPack_ == null) {
          RegisterPack = new global::SocketGameProtocol.RegisterPack();
        }
        RegisterPack.MergeFrom(other.RegisterPack);
      }
      roomPack_.Add(other.roomPack_);
      roomPlayerPack_.Add(other.roomPlayerPack_);
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Str = input.ReadString();
            break;
          }
          case 16: {
            RequestCode = (global::SocketGameProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 24: {
            ActionCode = (global::SocketGameProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 32: {
            ReturnCode = (global::SocketGameProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 42: {
            if (registerPack_ == null) {
              RegisterPack = new global::SocketGameProtocol.RegisterPack();
            }
            input.ReadMessage(RegisterPack);
            break;
          }
          case 50: {
            roomPack_.AddEntriesFrom(input, _repeated_roomPack_codec);
            break;
          }
          case 58: {
            roomPlayerPack_.AddEntriesFrom(input, _repeated_roomPlayerPack_codec);
            break;
          }
          case 66: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterPack : pb::IMessage<RegisterPack> {
    private static readonly pb::MessageParser<RegisterPack> _parser = new pb::MessageParser<RegisterPack>(() => new RegisterPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack(RegisterPack other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterPack Clone() {
      return new RegisterPack(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    /// 用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterPack other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPack : pb::IMessage<RoomPack> {
    private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack(RoomPack other) : this() {
      roomName_ = other.roomName_;
      maxCount_ = other.maxCount_;
      curCount_ = other.curCount_;
      roomState_ = other.roomState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack Clone() {
      return new RoomPack(this);
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    /// 房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 2;
    private int maxCount_;
    /// <summary>
    /// 房间最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "curCount" field.</summary>
    public const int CurCountFieldNumber = 3;
    private int curCount_;
    /// <summary>
    /// 房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurCount {
      get { return curCount_; }
      set {
        curCount_ = value;
      }
    }

    /// <summary>Field number for the "roomState" field.</summary>
    public const int RoomStateFieldNumber = 4;
    private int roomState_;
    /// <summary>
    /// 房间状态 1-准备中;2-满员;3-游戏中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomState {
      get { return roomState_; }
      set {
        roomState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (MaxCount != other.MaxCount) return false;
      if (CurCount != other.CurCount) return false;
      if (RoomState != other.RoomState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (CurCount != 0) hash ^= CurCount.GetHashCode();
      if (RoomState != 0) hash ^= RoomState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCount);
      }
      if (CurCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurCount);
      }
      if (RoomState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (CurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCount);
      }
      if (RoomState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPack other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.CurCount != 0) {
        CurCount = other.CurCount;
      }
      if (other.RoomState != 0) {
        RoomState = other.RoomState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 24: {
            CurCount = input.ReadInt32();
            break;
          }
          case 32: {
            RoomState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPlayerPack : pb::IMessage<RoomPlayerPack> {
    private static readonly pb::MessageParser<RoomPlayerPack> _parser = new pb::MessageParser<RoomPlayerPack>(() => new RoomPlayerPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerPack(RoomPlayerPack other) : this() {
      playerName_ = other.playerName_;
      playerState_ = other.playerState_;
      charaStatePack_ = other.charaStatePack_ != null ? other.charaStatePack_.Clone() : null;
      animaName_ = other.animaName_;
      nameType_ = other.nameType_;
      boolParam_ = other.boolParam_;
      intParam_ = other.intParam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayerPack Clone() {
      return new RoomPlayerPack(this);
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    /// <summary>
    /// 房间玩家姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerState" field.</summary>
    public const int PlayerStateFieldNumber = 2;
    private bool playerState_;
    /// <summary>
    ///玩家状态 	0-未准备;1-准备;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "charaStatePack" field.</summary>
    public const int CharaStatePackFieldNumber = 3;
    private global::SocketGameProtocol.CharaStatePack charaStatePack_;
    /// <summary>
    /// 角色状态信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SocketGameProtocol.CharaStatePack CharaStatePack {
      get { return charaStatePack_; }
      set {
        charaStatePack_ = value;
      }
    }

    /// <summary>Field number for the "animaName" field.</summary>
    public const int AnimaNameFieldNumber = 4;
    private string animaName_ = "";
    /// <summary>
    /// 动画名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimaName {
      get { return animaName_; }
      set {
        animaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nameType" field.</summary>
    public const int NameTypeFieldNumber = 5;
    private string nameType_ = "";
    /// <summary>
    /// 名字类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameType {
      get { return nameType_; }
      set {
        nameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boolParam" field.</summary>
    public const int BoolParamFieldNumber = 6;
    private bool boolParam_;
    /// <summary>
    /// 布尔参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolParam {
      get { return boolParam_; }
      set {
        boolParam_ = value;
      }
    }

    /// <summary>Field number for the "intParam" field.</summary>
    public const int IntParamFieldNumber = 7;
    private int intParam_;
    /// <summary>
    /// 整型参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntParam {
      get { return intParam_; }
      set {
        intParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayerPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayerPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (PlayerState != other.PlayerState) return false;
      if (!object.Equals(CharaStatePack, other.CharaStatePack)) return false;
      if (AnimaName != other.AnimaName) return false;
      if (NameType != other.NameType) return false;
      if (BoolParam != other.BoolParam) return false;
      if (IntParam != other.IntParam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerState != false) hash ^= PlayerState.GetHashCode();
      if (charaStatePack_ != null) hash ^= CharaStatePack.GetHashCode();
      if (AnimaName.Length != 0) hash ^= AnimaName.GetHashCode();
      if (NameType.Length != 0) hash ^= NameType.GetHashCode();
      if (BoolParam != false) hash ^= BoolParam.GetHashCode();
      if (IntParam != 0) hash ^= IntParam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (PlayerState != false) {
        output.WriteRawTag(16);
        output.WriteBool(PlayerState);
      }
      if (charaStatePack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CharaStatePack);
      }
      if (AnimaName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AnimaName);
      }
      if (NameType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameType);
      }
      if (BoolParam != false) {
        output.WriteRawTag(48);
        output.WriteBool(BoolParam);
      }
      if (IntParam != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IntParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerState != false) {
        size += 1 + 1;
      }
      if (charaStatePack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharaStatePack);
      }
      if (AnimaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimaName);
      }
      if (NameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameType);
      }
      if (BoolParam != false) {
        size += 1 + 1;
      }
      if (IntParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntParam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayerPack other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerState != false) {
        PlayerState = other.PlayerState;
      }
      if (other.charaStatePack_ != null) {
        if (charaStatePack_ == null) {
          CharaStatePack = new global::SocketGameProtocol.CharaStatePack();
        }
        CharaStatePack.MergeFrom(other.CharaStatePack);
      }
      if (other.AnimaName.Length != 0) {
        AnimaName = other.AnimaName;
      }
      if (other.NameType.Length != 0) {
        NameType = other.NameType;
      }
      if (other.BoolParam != false) {
        BoolParam = other.BoolParam;
      }
      if (other.IntParam != 0) {
        IntParam = other.IntParam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 16: {
            PlayerState = input.ReadBool();
            break;
          }
          case 26: {
            if (charaStatePack_ == null) {
              CharaStatePack = new global::SocketGameProtocol.CharaStatePack();
            }
            input.ReadMessage(CharaStatePack);
            break;
          }
          case 34: {
            AnimaName = input.ReadString();
            break;
          }
          case 42: {
            NameType = input.ReadString();
            break;
          }
          case 48: {
            BoolParam = input.ReadBool();
            break;
          }
          case 56: {
            IntParam = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharaStatePack : pb::IMessage<CharaStatePack> {
    private static readonly pb::MessageParser<CharaStatePack> _parser = new pb::MessageParser<CharaStatePack>(() => new CharaStatePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharaStatePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SocketGameProtocol.SocketGameProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharaStatePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharaStatePack(CharaStatePack other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      rotaX_ = other.rotaX_;
      rotaY_ = other.rotaY_;
      rotaZ_ = other.rotaZ_;
      rigRotaX_ = other.rigRotaX_;
      rigRotaY_ = other.rigRotaY_;
      rigRotaZ_ = other.rigRotaZ_;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharaStatePack Clone() {
      return new CharaStatePack(this);
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "rotaX" field.</summary>
    public const int RotaXFieldNumber = 4;
    private float rotaX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaX {
      get { return rotaX_; }
      set {
        rotaX_ = value;
      }
    }

    /// <summary>Field number for the "rotaY" field.</summary>
    public const int RotaYFieldNumber = 5;
    private float rotaY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaY {
      get { return rotaY_; }
      set {
        rotaY_ = value;
      }
    }

    /// <summary>Field number for the "rotaZ" field.</summary>
    public const int RotaZFieldNumber = 6;
    private float rotaZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaZ {
      get { return rotaZ_; }
      set {
        rotaZ_ = value;
      }
    }

    /// <summary>Field number for the "RigRotaX" field.</summary>
    public const int RigRotaXFieldNumber = 7;
    private float rigRotaX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RigRotaX {
      get { return rigRotaX_; }
      set {
        rigRotaX_ = value;
      }
    }

    /// <summary>Field number for the "RigRotaY" field.</summary>
    public const int RigRotaYFieldNumber = 8;
    private float rigRotaY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RigRotaY {
      get { return rigRotaY_; }
      set {
        rigRotaY_ = value;
      }
    }

    /// <summary>Field number for the "RigRotaZ" field.</summary>
    public const int RigRotaZFieldNumber = 9;
    private float rigRotaZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RigRotaZ {
      get { return rigRotaZ_; }
      set {
        rigRotaZ_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 10;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharaStatePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharaStatePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaX, other.RotaX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaY, other.RotaY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaZ, other.RotaZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RigRotaX, other.RigRotaX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RigRotaY, other.RigRotaY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RigRotaZ, other.RigRotaZ)) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (RotaX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaX);
      if (RotaY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaY);
      if (RotaZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaZ);
      if (RigRotaX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RigRotaX);
      if (RigRotaY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RigRotaY);
      if (RigRotaZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RigRotaZ);
      if (Health != 0) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
      if (RotaX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RotaX);
      }
      if (RotaY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotaY);
      }
      if (RotaZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotaZ);
      }
      if (RigRotaX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RigRotaX);
      }
      if (RigRotaY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RigRotaY);
      }
      if (RigRotaZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RigRotaZ);
      }
      if (Health != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (RotaX != 0F) {
        size += 1 + 4;
      }
      if (RotaY != 0F) {
        size += 1 + 4;
      }
      if (RotaZ != 0F) {
        size += 1 + 4;
      }
      if (RigRotaX != 0F) {
        size += 1 + 4;
      }
      if (RigRotaY != 0F) {
        size += 1 + 4;
      }
      if (RigRotaZ != 0F) {
        size += 1 + 4;
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharaStatePack other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.RotaX != 0F) {
        RotaX = other.RotaX;
      }
      if (other.RotaY != 0F) {
        RotaY = other.RotaY;
      }
      if (other.RotaZ != 0F) {
        RotaZ = other.RotaZ;
      }
      if (other.RigRotaX != 0F) {
        RigRotaX = other.RigRotaX;
      }
      if (other.RigRotaY != 0F) {
        RigRotaY = other.RigRotaY;
      }
      if (other.RigRotaZ != 0F) {
        RigRotaZ = other.RigRotaZ;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
          case 37: {
            RotaX = input.ReadFloat();
            break;
          }
          case 45: {
            RotaY = input.ReadFloat();
            break;
          }
          case 53: {
            RotaZ = input.ReadFloat();
            break;
          }
          case 61: {
            RigRotaX = input.ReadFloat();
            break;
          }
          case 69: {
            RigRotaY = input.ReadFloat();
            break;
          }
          case 77: {
            RigRotaZ = input.ReadFloat();
            break;
          }
          case 80: {
            Health = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
